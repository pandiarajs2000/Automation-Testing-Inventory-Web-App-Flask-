{"name": "test_get_updates_msg", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div[1]/a\"}\n  (Session info: chrome=132.0.6834.162); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF61E3102F5+28725]\n\t(No symbol) [0x00007FF61E272AE0]\n\t(No symbol) [0x00007FF61E10510A]\n\t(No symbol) [0x00007FF61E1593D2]\n\t(No symbol) [0x00007FF61E1595FC]\n\t(No symbol) [0x00007FF61E1A3407]\n\t(No symbol) [0x00007FF61E17FFEF]\n\t(No symbol) [0x00007FF61E1A0181]\n\t(No symbol) [0x00007FF61E17FD53]\n\t(No symbol) [0x00007FF61E14A0E3]\n\t(No symbol) [0x00007FF61E14B471]\n\tGetHandleVerifier [0x00007FF61E63F30D+3366989]\n\tGetHandleVerifier [0x00007FF61E6512F0+3440688]\n\tGetHandleVerifier [0x00007FF61E6478FD+3401277]\n\tGetHandleVerifier [0x00007FF61E3DAAAB+858091]\n\t(No symbol) [0x00007FF61E27E74F]\n\t(No symbol) [0x00007FF61E27A304]\n\t(No symbol) [0x00007FF61E27A49D]\n\t(No symbol) [0x00007FF61E268B69]\n\tBaseThreadInitThunk [0x00007FF8B2E6259D+29]\n\tRtlUserThreadStart [0x00007FF8B3AEAF38+40]", "trace": "self = <pre_sample_test.TestApp object at 0x0000021918445310>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_get_updates_msg(self):\n        try:\n            # update_msg_text = self.driver.find_element(By.XPATH,\"//h4[1]\")\n>           data_display = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, \"//h4[1]\")))\n\npre_sample_test.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6d4eaf825b7b9fa094a0430fd30566a7\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000021918B68360>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF61E3102F5+28725]\nE       \t(No symbol) [0x00007FF61E272AE0]\nE       \t(No symbol) [0x00007FF61E10510A]\nE       \t(No symbol) [0x00007FF61E1593D2]\nE       \t(No symbol) [0x00007FF61E1595FC]\nE       \t(No symbol) [0x00007FF61E1A3407]\nE       \t(No symbol) [0x00007FF61E17FFEF]\nE       \t(No symbol) [0x00007FF61E1A0181]\nE       \t(No symbol) [0x00007FF61E17FD53]\nE       \t(No symbol) [0x00007FF61E14A0E3]\nE       \t(No symbol) [0x00007FF61E14B471]\nE       \tGetHandleVerifier [0x00007FF61E63F30D+3366989]\nE       \tGetHandleVerifier [0x00007FF61E6512F0+3440688]\nE       \tGetHandleVerifier [0x00007FF61E6478FD+3401277]\nE       \tGetHandleVerifier [0x00007FF61E3DAAAB+858091]\nE       \t(No symbol) [0x00007FF61E27E74F]\nE       \t(No symbol) [0x00007FF61E27A304]\nE       \t(No symbol) [0x00007FF61E27A49D]\nE       \t(No symbol) [0x00007FF61E268B69]\nE       \tBaseThreadInitThunk [0x00007FF8B2E6259D+29]\nE       \tRtlUserThreadStart [0x00007FF8B3AEAF38+40]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pre_sample_test.TestApp object at 0x0000021918445310>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_get_updates_msg(self):\n        try:\n            # update_msg_text = self.driver.find_element(By.XPATH,\"//h4[1]\")\n            data_display = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, \"//h4[1]\")))\n            if data_display.is_displayed():\n                ActionChains(self.driver).scroll_to_element(data_display).perform()\n                print(data_display.text)\n            else:\n                print(\"Element is not displayed.\")\n        except Exception as e:\n            print(f\"Error : This element Already Updated... if you want update the element kindly update the text in code..\")\n>           back_to_home = self.driver.find_element(By.XPATH,\"//button[@class='btn1']\")\n\npre_sample_test.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:888: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021918375610>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF61E268B69]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8B2E6259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8B3AEAF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//button[@class='btn1']\"}\nE         (Session info: chrome=132.0.6834.162); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF61E3102F5+28725]\nE       \t(No symbol) [0x00007FF61E272AE0]\nE       \t(No symbol) [0x00007FF61E10510A]\nE       \t(No symbol) [0x00007FF61E1593D2]\nE       \t(No symbol) [0x00007FF61E1595FC]\nE       \t(No symbol) [0x00007FF61E1A3407]\nE       \t(No symbol) [0x00007FF61E17FFEF]\nE       \t(No symbol) [0x00007FF61E1A0181]\nE       \t(No symbol) [0x00007FF61E17FD53]\nE       \t(No symbol) [0x00007FF61E14A0E3]\nE       \t(No symbol) [0x00007FF61E14B471]\nE       \tGetHandleVerifier [0x00007FF61E63F30D+3366989]\nE       \tGetHandleVerifier [0x00007FF61E6512F0+3440688]\nE       \tGetHandleVerifier [0x00007FF61E6478FD+3401277]\nE       \tGetHandleVerifier [0x00007FF61E3DAAAB+858091]\nE       \t(No symbol) [0x00007FF61E27E74F]\nE       \t(No symbol) [0x00007FF61E27A304]\nE       \t(No symbol) [0x00007FF61E27A49D]\nE       \t(No symbol) [0x00007FF61E268B69]\nE       \tBaseThreadInitThunk [0x00007FF8B2E6259D+29]\nE       \tRtlUserThreadStart [0x00007FF8B3AEAF38+40]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pre_sample_test.TestApp object at 0x0000021918445310>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_get_updates_msg(self):\n        try:\n            # update_msg_text = self.driver.find_element(By.XPATH,\"//h4[1]\")\n            data_display = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.XPATH, \"//h4[1]\")))\n            if data_display.is_displayed():\n                ActionChains(self.driver).scroll_to_element(data_display).perform()\n                print(data_display.text)\n            else:\n                print(\"Element is not displayed.\")\n        except Exception as e:\n            print(f\"Error : This element Already Updated... if you want update the element kindly update the text in code..\")\n            back_to_home = self.driver.find_element(By.XPATH,\"//button[@class='btn1']\")\n        finally:\n>           back_to_home = self.driver.find_element(By.XPATH,\"/html/body/div[1]/a\")\n\npre_sample_test.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:888: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021918375610>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF61E268B69]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8B2E6259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8B3AEAF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div[1]/a\"}\nE         (Session info: chrome=132.0.6834.162); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF61E3102F5+28725]\nE       \t(No symbol) [0x00007FF61E272AE0]\nE       \t(No symbol) [0x00007FF61E10510A]\nE       \t(No symbol) [0x00007FF61E1593D2]\nE       \t(No symbol) [0x00007FF61E1595FC]\nE       \t(No symbol) [0x00007FF61E1A3407]\nE       \t(No symbol) [0x00007FF61E17FFEF]\nE       \t(No symbol) [0x00007FF61E1A0181]\nE       \t(No symbol) [0x00007FF61E17FD53]\nE       \t(No symbol) [0x00007FF61E14A0E3]\nE       \t(No symbol) [0x00007FF61E14B471]\nE       \tGetHandleVerifier [0x00007FF61E63F30D+3366989]\nE       \tGetHandleVerifier [0x00007FF61E6512F0+3440688]\nE       \tGetHandleVerifier [0x00007FF61E6478FD+3401277]\nE       \tGetHandleVerifier [0x00007FF61E3DAAAB+858091]\nE       \t(No symbol) [0x00007FF61E27E74F]\nE       \t(No symbol) [0x00007FF61E27A304]\nE       \t(No symbol) [0x00007FF61E27A49D]\nE       \t(No symbol) [0x00007FF61E268B69]\nE       \tBaseThreadInitThunk [0x00007FF8B2E6259D+29]\nE       \tRtlUserThreadStart [0x00007FF8B3AEAF38+40]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "start": 1739001671796, "stop": 1739001682239, "uuid": "1f5ffb55-e694-44be-b2ab-c403adaa0ce5", "historyId": "c891e8e3da24ec763b5531d12dd15296", "testCaseId": "c891e8e3da24ec763b5531d12dd15296", "fullName": "pre_sample_test.TestApp#test_get_updates_msg", "labels": [{"name": "severity", "value": "normal"}, {"name": "suite", "value": "pre_sample_test"}, {"name": "subSuite", "value": "TestApp"}, {"name": "host", "value": "DESKTOP-D5ES2FE"}, {"name": "thread", "value": "20148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pre_sample_test"}]}